(* pathway language, version 1 *)

(* parsing starts here *)
start = program:{construct}+ ;

(* constructs *)
construct = declaration | construct | situation | pathway | comment ;

(* declarations *)
declaration = '//' action:Word parameters:RestOfLine ;

(* pathways *)
pathway = 'pathway' situation_ref pattern changes end ;

(* situations *)
situation = ('sit' | 'situation') situation_body end ;
situation_body = pattern  ;
situation_ref = 'situation' ['"'] name ['"'] ;

(* patterns *)
pattern = 'pattern' pattern_decl end ;
pattern_decl = 'find' | 'assure' 'the' node 'is' (type_constraint | incoming_constraint) ;

(* constraints *)
type_constraint = 'of type' type ;
incoming_constraint = type [capture] ;

(* changes *)
changes = 'changes' () end ;

(* comments *)
comment = '__' @:RestOfLine ;

(* semantic atoms *)
capture = '(' name ')' ;
name = Word ;
type = '[' name ']' | '#' name | 'type:' node ;
node = '(' name ')' ;

(* lexical components *)
end = 'end' ;
Word = /[a-zA-Z]+/ ;
RestOfLine = /[^\n]*\n/ ;
